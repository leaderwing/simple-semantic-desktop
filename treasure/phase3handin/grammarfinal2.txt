
program --> { var-declaration | fun-declaration }*


var-declaration --> int id ;  |  int id [ num ] ;  | int * id ; |
			float id ;  |  float id [ num ] ;  | float * id ;|
			void id ;  |  void id [ num ] ;  | void * id ;


fun-declaration --> int id ( params ) compound-stmt |
		    float id ( params ) compound-stmt |
		    void id ( params ) compound-stmt


params --> param rest-of-params | void
rest-of-params --> , param rest-of-params | e


param --> int id   |  int id [  ]   | int * id |
	float id   |  float id [  ]   | float * id | void * id 


compound-stmt --> { local-declarations statement-list }


local-declarations -->  var-declaration local-declarations   |  e


statement-list --> statement statement-list  | e


statement --> expression-stmt  |  compound-stmt  |  if-stmt  |  
	      while-stmt  |   for-stmt  |  return-stmt


expression-stmt --> expression ;  |  e ;


if-stmt  -->  if-start if-remainder
if-start  -->  if ( expression ) statement
if-remainder  -->  e  |  else statement


while-stmt --> while ( expression ) statement


for-stmt --> for ( optional-expression ; optional-expression ; optional-expression ) statement


return-stmt --> return ;  |  return expression ;


expression --> or-expr  =  expression  | or-expr  +=  expression  | 
		or-expr  -=  expression  | or-expr


or-expr --> and-expr (|| and-expr)*


and-expr -->  relational-expr (&& relational-expr)*


relational-expr --> additive-expr (<= additive-expr  |  
		      >= additive-expr  |  
			< additive-expr  |  
			  > additive-expr  | 
			    == additive-expr  |  
			       != additive-expr  )*


additive-expr --> term (+ term |  - term )*


term --> unary-expr (* unary-expr  |  / unary-expr  |  % unary-expr )*


unary-expr --> primary-expr  |  + unary-expr |  - unary-expr |  
	       ! unary-expr |  &  unary-expr |  * unary-expr


primary-expr -->  ( expression )  | id  |  id [ expression ]  |  id ( args )  |  num  |  real


args  -->  expression (, expression )* | e