#BlueJ class context
comment0.params=world
comment0.target=void\ addedToWorld(World)
comment0.text=\naddedToWorld()\ -\ the\ constructor\ for\ ai_Agent\n\n
comment1.target=ArrayList\ A_StarPathToGoal()
comment10.params=path
comment10.target=void\ paintPath(ArrayList)
comment10.text=\nreads\ the\ directions\ and\ has\ the\ agent\ paint\ breadcrumbs\non\ that\ path\n\n@param\ direction\ for\ the\ path\ from\ start\ to\ goal\n\n
comment11.params=start\ goal
comment11.target=ArrayList\ A_Star(Point,\ Point)
comment11.text=\nA*\ search\n\n@param\ start\ -\ contains\ x/y\ for\ starting\ position\n@param\ goal\ \ -\ contains\ x/y\ for\ goal\ position\n\n@return\ an\ array\ list\ which\ contains\ the\ directions\ from\nstart\ to\ goal.\n\n
comment12.params=list
comment12.target=int\ findLowestIndex(ArrayList)
comment12.text=\nfindLowestIndex()\ -\ finds\ the\ index\ of\ the\ element\ in\ int\ array\nwith\ the\ lowest\ value.\n\n
comment13.params=start\ goal
comment13.target=ArrayList\ DFS(Point,\ Point)
comment13.text=\nDFS\ \n\n@param\ start\ -\ contains\ x/y\ for\ starting\ position\n@param\ goal\ \ -\ contains\ x/y\ for\ goal\ position\n\n@return\ an\ array\ list\ which\ contains\ the\ directions\ from\nstart\ to\ goal.\n\n
comment14.params=current\ goal\ path
comment14.target=ArrayList\ DFS_helper(Point,\ Point,\ ArrayList)
comment15.target=int\ seeBreadCrumbs()
comment15.text=\nseeBreadCrumbs()\n\n\n@return\ the\ direction\ of\ the\ neighbouring\ breadcrumb\n\n
comment16.params=sourcex\ sourcey\ destinationx\ destinationy
comment16.target=int\ calculateDirection(int,\ int,\ int,\ int)
comment17.params=direction
comment17.target=int\ xOffset(int)
comment17.text=\nxOffset()\ -\ returns\ the\ x-offset\ to\ move\ to,\ given\ a\ direction\n@param\ -\ direction\ is\ the\ direction\ in\ terms\ of\ the\ direction\nconstants\n\n
comment18.params=direction
comment18.target=int\ yOffset(int)
comment18.text=\nyOffset()\ -\ returns\ the\ y-offset\ to\ move\ to,\ given\ a\ direction\n@param\ -\ direction\ is\ the\ direction\ in\ terms\ of\ the\ direction\nconstants\n\n
comment19.target=void\ initializeBCImages()
comment2.target=void\ act()
comment2.text=\nAct\ -\ do\ whatever\ the\ ai_Agent\ wants\ to\ do.\ This\ method\ is\ncalled\ whenever\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\nenvironment.\n\n
comment20.params=x\ y\ img
comment20.target=void\ placeBreadCrumb(int,\ int,\ GreenfootImage)
comment21.params=x_offset\ y_offset\ img
comment21.target=boolean\ hasBreadCrumbAtOffset(int,\ int,\ GreenfootImage)
comment22.params=x_offset\ y_offset
comment22.target=boolean\ hasBreadCrumbAtOffset(int,\ int)
comment23.params=x_offset\ y_offset
comment23.target=void\ removeBreadCrumbsAtOffset(int,\ int)
comment24.params=x_offset\ y_offset\ img
comment24.target=void\ removeBreadCrumbsAtOffset(int,\ int,\ GreenfootImage)
comment25.params=x\ y\ img
comment25.target=boolean\ hasBreadCrumbAt(int,\ int,\ GreenfootImage)
comment26.params=x\ y
comment26.target=boolean\ hasBreadCrumb(int,\ int)
comment27.params=x\ y
comment27.target=void\ removeBreadCrumbsAt(int,\ int)
comment28.params=x\ y\ img
comment28.target=void\ removeBreadCrumbsAt(int,\ int,\ GreenfootImage)
comment29.params=start\ goal
comment29.target=void\ calculateHeuristic(Point,\ Point)
comment29.text=\ncalculateHeuristic()\ calculates\ heuristic\ values\ for\ A*\ search\nas\ the\ manhattan\ distance\ to\ the\ goal.\n\n@param\ start\ -\ contains\ x/y\ for\ starting\ position\n@param\ goal\ \ -\ contains\ x/y\ for\ goal\ position\n\n@return\ a\ 2D\ array\ of\ ints\ with\ H\ value\ for\ each\ point\ in\ it\n\n
comment3.target=String\ id()
comment3.text=\nidentify\ the\ author/creator\ of\ the\ agent\n\n@return\ a\ string\ that\ contains\ the\ name\ of\ the\ agent\ author\n\n
comment30.params=x\ y
comment30.target=boolean\ canMove(int,\ int)
comment31.params=x\ y
comment31.target=void\ placeGBreadCrumb(int,\ int)
comment4.target=int\ foundWall()
comment4.text=\ndetects\ a\ wall\ if\ present,\ and\ its\ direction\n\n@return\ the\ direction\ where\ a\ wall\ was\ found.\ If\nnone\ was\ found,\ NONE\ is\ returned.\ Direction\ is\ defined\nthe\ constants\ EAST,\ WEST,\ NORTH,\ SOUTH\n\n
comment5.target=int\ getDirection()
comment5.text=\nget\ the\ agent's\ current\ direction\n\n@return\ direction\ as\ defined\ by\ direction\ constants\n\n
comment6.params=direction
comment6.target=void\ setDirection(int)
comment6.text=\nset\ the\ agents\ direction\n\n@param\ direction\ as\ defined\ by\ direction\ constants\ \n\n
comment7.target=void\ randomDirection()
comment7.text=\nchange\ direction\ randomly\n\n
comment8.target=void\ move()
comment8.text=\nmove\ the\ agent\n\n
comment9.target=void\ turnLeft()
comment9.text=\nmake\ the\ agent\ turn\ left\n\n
numComments=32
